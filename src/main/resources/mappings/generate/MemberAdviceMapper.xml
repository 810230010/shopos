<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.wuliangit.shopos.dao.MemberAdviceMapper">
  <resultMap id="BaseResultMap" type="com.wuliangit.shopos.entity.MemberAdvice">
    <id column="advice_id" jdbcType="BIGINT" property="adviceId" />
    <result column="member_id" jdbcType="INTEGER" property="memberId" />
    <result column="member_name" jdbcType="VARCHAR" property="memberName" />
    <result column="create_time" jdbcType="DATE" property="createTime" />
  </resultMap>
  <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="com.wuliangit.shopos.entity.MemberAdvice">
    <result column="advice_content" jdbcType="LONGVARCHAR" property="adviceContent" />
  </resultMap>
  <sql id="Base_Column_List">
    advice_id, member_id, member_name, create_time
  </sql>
  <sql id="Blob_Column_List">
    advice_content
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="ResultMapWithBLOBs">
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from t_member_advice
    where advice_id = #{adviceId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from t_member_advice
    where advice_id = #{adviceId,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.wuliangit.shopos.entity.MemberAdvice">
    insert into t_member_advice (advice_id, member_id, member_name, 
      create_time, advice_content)
    values (#{adviceId,jdbcType=INTEGER}, #{memberId,jdbcType=INTEGER}, #{memberName,jdbcType=VARCHAR},
      #{createTime,jdbcType=DATE}, #{adviceContent,jdbcType=LONGVARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.wuliangit.shopos.entity.MemberAdvice">
    insert into t_member_advice
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="adviceId != null">
        advice_id,
      </if>
      <if test="memberId != null">
        member_id,
      </if>
      <if test="memberName != null">
        member_name,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="adviceContent != null">
        advice_content,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="adviceId != null">
        #{adviceId,jdbcType=INTEGER},
      </if>
      <if test="memberId != null">
        #{memberId,jdbcType=INTEGER},
      </if>
      <if test="memberName != null">
        #{memberName,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=DATE},
      </if>
      <if test="adviceContent != null">
        #{adviceContent,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.wuliangit.shopos.entity.MemberAdvice">
    update t_member_advice
    <set>
      <if test="memberId != null">
        member_id = #{memberId,jdbcType=INTEGER},
      </if>
      <if test="memberName != null">
        member_name = #{memberName,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=DATE},
      </if>
      <if test="adviceContent != null">
        advice_content = #{adviceContent,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where advice_id = #{adviceId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.wuliangit.shopos.entity.MemberAdvice">
    update t_member_advice
    set member_id = #{memberId,jdbcType=INTEGER},
      member_name = #{memberName,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=DATE},
      advice_content = #{adviceContent,jdbcType=LONGVARCHAR}
    where advice_id = #{adviceId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.wuliangit.shopos.entity.MemberAdvice">
    update t_member_advice
    set member_id = #{memberId,jdbcType=INTEGER},
      member_name = #{memberName,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=DATE}
    where advice_id = #{adviceId,jdbcType=INTEGER}
  </update>
</mapper>